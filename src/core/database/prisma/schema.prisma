generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum TransactionStatus {
  PENDING
  CANCELED
  EXPIRED
  PAID
  FAILED
  REFUNDED
}

enum JobStatus {
  PENDING
  DONE
  FAILED
}

enum AuthProvider {
  GOOGLE
  LOCAL
}

// Models

model User {
  userId      Int           @id @default(autoincrement())
  username    String        @db.VarChar(255)
  email       String        @unique @db.VarChar(255)
  password    String
  profileUrl  String?
  credit      Int           @default(0)
  provider    AuthProvider
  providerId  String?
  Story       Story[]
  Transaction Transaction[]
  createdAt   DateTime      @default(now())
}

model Transaction {
  transactionId       Int               @id @default(autoincrement())
  user                User              @relation(fields: [userId], references: [userId])
  userId              Int
  credit              Int
  status              TransactionStatus
  timestamp           DateTime          @default(now())
  lastActionTimestamp DateTime
  notes               String?
}

model Story {
  storyId     Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [userId])
  userId      Int
  title       String     @db.VarChar(255)
  description String
  logoUrl     String?
  Scene       Scene[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Document    Document[]
}

model Category {
  categoryId Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  Document   Document[]
}

model Document {
  documentId    Int             @id @default(autoincrement())
  story         Story           @relation(fields: [storyId], references: [storyId], onDelete: Cascade)
  storyId       Int
  category      Category        @relation(fields: [categoryId], references: [categoryId])
  categoryId    Int
  name          String          @db.VarChar(255)
  /// [OriginalData]
  originalData  Json            @default("[]")
  jobStatus     JobStatus       @default(PENDING)
  jobReason     String?
  DocumentChunk DocumentChunk[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model DocumentChunk {
  documentChunkId Int                         @id @default(autoincrement())
  document        Document                    @relation(fields: [documentId], references: [documentId], onDelete: Cascade)
  documentId      Int
  index           Int
  content         String
  vector          Unsupported("vector(1536)")
}

model Scene {
  sceneId   Int       @id @default(autoincrement())
  story     Story     @relation(fields: [storyId], references: [storyId], onDelete: Cascade)
  storyId   Int
  content   String    @db.Text()
  jobStatus JobStatus @default(PENDING)
  jobReason String?
  createdAt DateTime  @default(now())
}
